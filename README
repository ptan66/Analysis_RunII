************ general notes *****************

As of Jun 28, 2017: jets collection in ntuple is PF jets (noCHS) and PF jet collection is actually PF CHS jet collection. 


************ !!!!!!!!!!!! ******************


Update in CMSSW_8_0_26 for final production. 

May 24, 2017: 

need be careful with the additional implemention of electron ID. have gone through electron, muon, jet ID, and b-tagging recommendation. Need conifrmation 
on the implmentation of pileup jet ID from Andreas. 


https://twiki.cern.ch/twiki/bin/view/CMS/HEEPElectronIdentificationRun2




cmsrel CMSSW_8_0_25
cd CMSSW_8_0_25/src
cmsenv 
git cms-merge-topic Sam-Harper:HEEPV70VID_8010_ReducedCheckout  #brings in HEEP V70 into VID
git cms-merge-topic ikrav:egm_id_80X_v3 #for other E/gamma IDs in VID if you wish to have them
git cms-merge-topic Sam-Harper:PackedCandNoPuppi #only necessary to run HEEP V70 on AOD (it will crash if this is not present looking for puppi candidates
mkdir -p ../external/slc6_amd64_gcc530/data/RecoEgamma/ElectronIdentification/ #we need this for the mva weights which runs in VID regardless if you need it or not
git clone git@github.com:cms-data/RecoEgamma-ElectronIdentification ../external/slc6_amd64_gcc530/data/RecoEgamma/ElectronIdentification/data #we need this for the mva weights which runs in VID regardless if you need it or not
scramv1 b -j 16 #more cores the better

#e/gamma smearing
cmsrel CMSSW_8_0_26_patch1
cd CMSSW_8_0_26_patch1/src
cmsenv
git cms-init
git cms-merge-topic cms-egamma:EGM_gain_v1
cd EgammaAnalysis/ElectronTools/data
git clone -b Moriond17_gainSwitch_unc https://github.com/ECALELFS/ScalesSmearings.git
cd $CMSSW_BASE/src
scram b



# setup CMSSW and the base git
cmsrel CMSSW_8_0_26_patch1
cd CMSSW_8_0_26_patch1/src 
cmsenv
git cms-init

#add the repository with the updated Egamma package
git cms-merge-topic cms-egamma:EGM_gain_v1
cd EgammaAnalysis/ElectronTools/data
# download the txt files with the corrections
git clone https://github.com/ECALELFS/ScalesSmearings.git
git checkout Moriond17_23Jan_v2

#compile
cd $CMSSW_BASE/src && scram b -j 8








import notes for CMSSW_8_0_26 (previous production)
+++++++++++++++++++++++++++++++++++++++++++++++++++


# e/gamma regresssion correction
https://twiki.cern.ch/twiki/bin/view/CMS/EGMRegression#EGMSmearer
cmsrel CMSSW_8_0_26_patch1
cd CMSSW_8_0_26_patch1/src
cmsenv
git cms-init
git cms-merge-topic rafaellopesdesa:EgammaAnalysis80_EGMSmearer_Moriond17_23Jan
cd EgammaAnalysis/ElectronTools/data
git clone https://github.com/ECALELFS/ScalesSmearings.git
cd $CMSSW_BASE/src
scram b


Mar. 06 note, using this branch: rafaellopesdesa:EgammaAnalysis80_AOD_EGMSmearer_Moriond17_23Jan

cp $CMSSW_BASE/src/Analysis_RunII/regressionApplication_cff.py     $CMSSW_BASE/src/EgammaAnalysis/ElectronTools/python/







fitler on bad muons?


https://twiki.cern.ch/twiki/bin/view/CMSPublic/ReMiniAOD03Feb2017Notes#MET_Recipes


git cms-merge-topic cms-met:METRecipe_8020 -u



PU jet ID

https://twiki.cern.ch/twiki/bin/viewauth/CMS/PileupJetID#Information_for_13_TeV_data_anal

git remote add ahinzmann git@github.com:ahinzmann/cmssw.git
git fetch ahinzmann PUidMiniAODfix80
git cherry-pick ca33756e1747aec27d13971bcfd0874b16724e7f


Pileup

MC:
https://github.com/cms-sw/cmssw/blob/CMSSW_8_0_X/SimGeneral/MixingModule/python/mix_2016_25ns_Moriond17MC_PoissonOOTPU_cfi.py
Data:



  pileupCalc.py -i /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/ReReco/Final/Cert_271036-284044_13TeV_23Sep2016ReReco_Collisions16_JSON.txt --inputLumiJSON /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/PileUp/pileup_latest.txt --calcMode true --minBiasXsec 69200 --maxPileupBin 75 --numPileupBins 75 pileup_2016_rereco.root

   pileupCalc.py -i /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/ReReco/Final/Cert_271036-284044_13TeV_23Sep2016ReReco_Collisions16_JSON.txt --inputLumiJSON /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/PileUp/pileup_latest.txt --calcMode true --minBiasXsec 72400 --maxPileupBin 75 --numPileupBins 75 pileup_2016_rerecoUp.root

	pileupCalc.py -i /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/ReReco/Final/Cert_271036-284044_13TeV_23Sep2016ReReco_Collisions16_JSON.txt --inputLumiJSON /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/PileUp/pileup_latest.txt --calcMode true --minBiasXsec 66000 --maxPileupBin 75 --numPileupBins 75 pileup_2016_rerecoDown.root



I derived [1] a pileup reweighting file [2] using the recommended minbias cross section of 69.2 mb +/- 4.6% [3] and the Summer16 MC pileup distribution [4].

When testing the reweighting in several control regions (comparing NVtx distribution in data vs MC [5]), I found that the -1 sigma variation (66.0 mb) for the minbias cross section provides better overall agreement (though there is some disagreement in the tails).

Has anyone else seen a similar effect? Should we agree within the PAG to use a minbias cross section of 66.0 mb?

Best,
Kevin

[1] https://github.com/TreeMaker/TreeMaker#calculate-pileup-corrections
[2] https://github.com/TreeMaker/TreeMaker/blob/Run2/Production/test/data/PileupHistograms_0121_69p2mb_pm4p6.root
[3] https://twiki.cern.ch/twiki/bin/viewauth/CMS/PileupJSONFileforData#Pileup_JSON_Files_For_Run_II
[4] https://github.com/cms-sw/cmssw/blob/CMSSW_8_0_X/SimGeneral/MixingModule/python/mix_2016_25ns_Moriond17MC_PoissonOOTPU_cfi.py
[5] https://indico.cern.ch/event/597564/contributions/2484615/attachments/1416148/2168656/pileup_weight_2016_4.pdf




some commands:

filterJSON.py and corresponding useful tools are at, 

/cvmfs/cms.cern.ch/slc6_amd64_gcc530/cms/cmssw/CMSSW_8_0_20/bin/slc6_amd64_gcc530/



2016 run ranges, 


DATASET	from Run	to Run
Run2016A	271036	271658   0
Run2016B	272007	275376   5.751
Run2016C	275657	276283   2.573
Run2016D	276315	276811   4.242
Run2016E	276831	277420   4.025
Run2016F	277772	278808   3.105
Run2016G	278820	280385   7.576
Run2016H	280919	284044   8.651

triggers:

single muon, 

HLT_IsoMu24_v* and HLT_IsoTkMu24_v*

double muon,


HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v*
HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v*




Single electron, HLT_Ele27_WPTight_Gsf_v*

double electron,
HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v* ( HLT_Ele17_ is not available for RunH)


mu e, HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_v* before <H
      HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ_v3 for H

e mu, HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v4 for H
      HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v* before <H




MC: 


HLT_IsoMu24_v* and HLT_IsoTkMu24_v*

HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v* 
HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v*

single electron, HLT_Ele27_WPTight_Gsf_v*
Double electron, HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v*


mu e, HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v*,
      HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v*, for H

e mu, HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v*,
      HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v*, for H





pile up files
/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/PileUp/



pileupCalc.py -i /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/Cert_271036-284044_13TeV_PromptReco_Collisions16_JSON_NoL1T.txt --inputLumiJSON /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions16/13TeV/PileUp/pileup_latest.txt  --calcMode true --minBiasXsec 69200 --maxPileupBin 50 --numPileupBins 50  pileup_2016_promptreco.root






Nov. 12, 2016:

pileupCalc.py -i MyAnalysisJSON.txt --inputLumiJSON pileup_latest.txt  --calcMode true --minBiasXsec 69200 --maxPileupBin 50 --numPileupBins 50  MyDataPileupHistogram.root
Note that the cross-section value is 69 mb for 2015 and 69.2 mb for 2016.
Note that the recommended minBias cross-section of 80mb for reweighting is currently under review. The best-fit value is determined to be 69.2 mb with an uncertainty of 4.6% Since all analysis JSON`s should only include subsets of Runs and LS`s of the DCS-Only JSON, you in principle do not have to calculate the pile up JSON yourself. Instead, use your specific JSON to mask the pile up JSON provided centrally, as in shown in the example above.


https://twiki.cern.ch/twiki/bin/view/CMS/PdmV2016Analysis
https://github.com/cms-sw/cmssw/blob/CMSSW_8_0_X/SimGeneral/MixingModule/python/mix_2016_25ns_SpringMC_PUScenarioV1_PoissonOOTPU_cfi.py





notes for 80x release


instructionf or CMSSW_8_0_20,

a) import egamma ID, 

cd CMSSW_8_0_20/src
cmsenv
git cms-merge-topic ikrav:egm_id_80X_v1
scram b -j 10


b) 

at /src/, git clone ssh://git@github.com/ptan66/Analysis_RunII.git

git checkout 80x_prodv1


scramv1 b -j10



randome notes:
++++++++++++++
egamma cut-based ID are switched to 80x version. 

muon ID/isolations looks ok. 

Checking PU jet ID? 

jet ID seems ok

ICHEP CSVv2 b-tagger

rootcint -f kinematicsDict.cc -rmf kinematicsDict.rootmap -rml kinematicsDict.so -c kinematics.h kinematicsLinkDef.h



using CMSSW classes.h and classes_def.xml to automatically generate the dictionary files



set up git using ssh (using bash shells)


git config --global user.name Ping Tan

git config --global user.email ptan@fnal.gov

git config --global user.github ptan66

ls -al ~/.ssh

eval "$(ssh-agent -s)"

ssh-add ~/.ssh/id_rsa

git clone ssh://git@github.com/<user>/<repository name>.git





+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
notes for 76x release


Jun 27, 2017:

note for 76x production v2 (backport package from 80x)

cmsrel CMSSW_7_6_3_patch2
cd CMSSW_7_6_3_patch2/src
cmsenv
git cms-merge-topic -u matteosan1:smearer_76X
scram b


cmsrel CMSSW_7_6_4
cd CMSSW_7_6_4/src/
cmsenv
git cms-init
git cms-merge-topic jbrands:pileupJetId76X
git cherry-pick 7c23237a87181e9320874c6f1f913a43fe849499
cd RecoJets/JetProducers/data/
wget https://github.com/jbrands/RecoJets-JetProducers/raw/3dad903ed25d025f68be94d6f781ca957d6f86ac/pileupJetId_76x_Eta0to2p5_BDT.weights.xml.gz
wget https://github.com/jbrands/RecoJets-JetProducers/raw/3dad903ed25d025f68be94d6f781ca957d6f86ac/pileupJetId_76x_Eta2p5to2p75_BDT.weights.xml.gz
wget https://github.com/jbrands/RecoJets-JetProducers/raw/3dad903ed25d025f68be94d6f781ca957d6f86ac/pileupJetId_76x_Eta2p75to3_BDT.weights.xml.gz
wget https://github.com/jbrands/RecoJets-JetProducers/raw/3dad903ed25d025f68be94d6f781ca957d6f86ac/pileupJetId_76x_Eta3to5_BDT.weights.xml.gz
cd ../../..
scram b -j5







#previous note for 76x production. 

git cms-merge-topic -u matteosan1:smearer_76X

#git cms-init
git cms-addpkg RecoJets/JetProducers
git remote add -f PUJetId https://github.com/jbrands/cmssw.git
git checkout PUJetId/pileupJetId76X -b pileupJetId76X
cd RecoJets/JetProducers/data/
wget https://github.com/jbrands/RecoJets-JetProducers/raw/3dad903ed25d025f68be94d6f781ca957d6f86ac/pileupJetId_76x_Eta0to2p5_BDT.weights.xml.gz
wget https://github.com/jbrands/RecoJets-JetProducers/raw/3dad903ed25d025f68be94d6f781ca957d6f86ac/pileupJetId_76x_Eta2p5to2p75_BDT.weights.xml.gz
wget https://github.com/jbrands/RecoJets-JetProducers/raw/3dad903ed25d025f68be94d6f781ca957d6f86ac/pileupJetId_76x_Eta2p75to3_BDT.weights.xml.gz
wget https://github.com/jbrands/RecoJets-JetProducers/raw/3dad903ed25d025f68be94d6f781ca957d6f86ac/pileupJetId_76x_Eta3to5_BDT.weights.xml.gz

git cms-merge-topic -u matteosan1:smearer_76X
git clone https://github.com/ptan66/Analysis_RunII

scramv1 b distclean

scramv1 b -j10


pileup: 

   pileupCalc.py -i /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/Reprocessing/Cert_13TeV_16Dec2015ReReco_Collisions15_25ns_JSON_Silver_v2.txt --inputLumiJSON /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/PileUp/pileup_latest.txt --calcMode true --minBiasXsec 69000 --maxPileupBin 50 --numPileupBins 50 pileup_2015_rereco.root

   pileupCalc.py -i /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/Reprocessing/Cert_13TeV_16Dec2015ReReco_Collisions15_25ns_JSON_Silver_v2.txt --inputLumiJSON /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/PileUp/pileup_latest.txt --calcMode true --minBiasXsec 72450 --maxPileupBin 50 --numPileupBins 50 pileup_2015_rerecoUp.root
   pileupCalc.py -i /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/Reprocessing/Cert_13TeV_16Dec2015ReReco_Collisions15_25ns_JSON_Silver_v2.txt --inputLumiJSON /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/PileUp/pileup_latest.txt --calcMode true --minBiasXsec 65550 --maxPileupBin 50 --numPileupBins 50 pileup_2015_rerecoDown.root





set up guide for version 7.4.14.v1-patch1
++++++++++++++++++++++++++++++++++

   git clone https://github.com/ptan66/Analysis_RunII
git checkout 7.4.14.v1









electron ID
+++++++++++

Oct. 08, 2015: https://twiki.cern.ch/twiki/bin/view/CMS/CutBasedElectronIdentificationRun2




useful commands:
================

copy file over, no matter where it is located, 
---------------------------------------------

xrdcp root://cmsxrootd-site.fnal.gov//store/mc/RunIISpring15DR74/DYJetsToLL_M-50_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8/AODSIM/Asympt25ns_MCRUN2_74_V9-v3/10000/002F7FDD-BA13-E511-AA63-0026189437F5.root .


json file location:
------------------

/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/


luminosity calculation:
----------------------

commands:

setenv PATH $HOME/.local/bin:/afs/cern.ch/cms/lumi/brilconda-1.0.3/bin:$PATH
pip uninstall -y brilws
pip install --install-option="--prefix=$HOME/.local" brilws



version of software: brilconda-1.0.3

example command:
brilcalc lumi --normtag /afs/cern.ch/user/c/cmsbril/public/normtag_json/OfflineNormtagV1.json  --byls switch -u /pb -i [JSON from running over the PD]

--hltpath HLTPATH

HLTPATH is hlt path name or pattern. The string pattern uses the file system convention fnmatch. *, ? ,[seq], [!seq] operators are recognised. In order not to confuse with the file system, please double quote the hltpath string if there are special char *, ?, [] !


triggers:

HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v* (e.g., v1 for MC; v2 for data)
HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v*

HLT_Ele17_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v*


JEC:

MC:   74X_mcRun2_asymptotic_v2
Data: 74X_dataRun2_Prompt_v4

MET fitlers:

•  at least one good PV
•  HBHENoiseFilter loose
•  HBHEIsoNoiseFilter
•  eeBadScFilter
•  CSCTightHalo2015Filter

Pile Up
=======

01/06/2016, generate pileup files using command as below:

pileupCalc.py -i /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/Cert_246908-260627_13TeV_PromptReco_Collisions15_25ns_JSON_Silver_v2.txt --inputLumiJSON /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/PileUp/pileup_latest.txt --calcMode true --minBiasXsec 69000 --maxPileupBin 52 --numPileupBins 52 pileup_2015.root


location of pile up
-------------------

/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/PileUp/pileup_latest.txt

json file location:
------------------

/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/

pile up calculation

pileupCalc.py -i 
Cert_246908-258750_13TeV_PromptReco_Collisions15_25ns_JSON.txt 
--inputLumiJSON 
/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/PileUp/pileup_latest.txt
--calcMode true --minBiasXsec 80000 --maxPileupBin 52 --numPileupBins 52 
myhist.root

from Jiyeon
  I used the information of this link for my pileup calculation :
https://twiki.cern.ch/twiki/bin/viewauth/CMS/PileupJSONFileforData
(pileupCalc.py -i MyAnalysisJSON.txt --inputLumiJSON 
pileup_JSON_2011_4_2_validation.txt --calcMode true --minBiasXsec 69400 
--maxPileupBin 50 --numPileupBins 50 MyDataPileupHistogram.root)

Especially, I used the section of "Calculating Your Pileup Distribution".
with '--minBiasXsec = 73500' which is default value in CMSSW74x release.



Daily logs:
==========


Dec. 21, 2015
+++++++++++++




Dec. 03, 2015
+++++++++++++

long time no see, 



Nov. 06, 2015
+++++++++++++
tested over data/MC data sample, crab submission. Basic electron/muon IDs are 
implemented and tested to first order. Addtional work on the jet collections, etc. 




Oct. 22, 2015
+++++++++++++

implemented cut-based electron ID, and code was tested to run on MC simulation



Oct. 19, 2015
+++++++++++++

move back to the analyzer. continue 



Oct. 07, 2015
+++++++++++++

first test with MC samples, check the configration file "test.py"
essentially need check from all basic collections to be copied over, and 
root dictionary error as well. Good luck tomorrow!



Oct. 06, 2015
+++++++++++++

have code compiled in 7_4_14; first commit back to CVS




Oct. 05, 2015
+++++++++++++

Start porting code in 53x release to 74x releases.

Release: CMSSW_7_4_14; slc6_amd64_gcc491
Global tag:  MCRUN2_74_V9 (74x 25ns MC)

access the jet ID value map for jet ID related variables
 InputJetIDValueMap         = cms.InputTag("ak4JetID"), 

!!!!! need check for missing hits for track/electronID/electron MVA id/cocktail muon/





email from Ilya regarding electron ID
+++++++++++++++++++++++++++++++++++++


  As part of my EGM work, I am providing a set of demos for electron and photon usage
for all PAGs. Specifically for 25ns Spring15 samples, for the approved cut-based electron ID:

My example demo ntupler (note that it runs universally on AOD and miniAOD):
with full cut-based ID:
   https://github.com/ikrav/EgammaWork/blob/ntupler_and_VID_demos_7.4.12/ElectronNtupler/plugins/ElectronNtuplerVIDDemo.cc
just ntupler, no EGM ID embedded:
   https://github.com/ikrav/EgammaWork/blob/ntupler_and_VID_demos_7.4.12/ElectronNtupler/plugins/SimpleElectronNtupler.cc

The matching configs for cmsRun, respectively:
   https://github.com/ikrav/EgammaWork/blob/ntupler_and_VID_demos_7.4.12/ElectronNtupler/test/runElectrons_VID_CutBased_Spring15_25ns_demo.py
and
   https://github.com/ikrav/EgammaWork/blob/ntupler_and_VID_demos_7.4.12/ElectronNtupler/test/runElectrons.py

In both of the above you will find exactly the objects from the AOD and miniAOD
event record (electron collection names, etc) in the python configuration for the ntupler.

If you’d like to read more about these examples where I explain what line does what,
and the advice on using the EGM-certified ID, it is here: 
   https://twiki.cern.ch/twiki/bin/view/CMS/CutBasedElectronIdentificationRun2#Working_points_for_Spring15_MC_s
(see “Recipes for regular user for 7.4.12+”).

You can pull the whole example (after setting up the release and doing cms-merge-topic with 
the IDs code, if you plan to use it) as
  … you are in CMSSW_7_4_12/src/
  git clone https://github.com/ikrav/EgammaWork.git
  cd EgammaWork
  git checkout ntupler_and_VID_demos_7.4.12
  scram build

Let me know if you have questions.
Regards,
Ilya